pnorm(6,100,1.95, lower.tail = FALSE)
pnorm(6,100,0.04,1.95, lower.tail = FALSE)
pnorm(6,4,1.95, lower.tail = FALSE)
ConspiracySD = sqrt(100*0.04*0.96)
ConspiracySD
pnorm(6,4,1.95, lower.tail = FALSE)
JFKq = 1-JFKp
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
pnorm(0.57,100,0.51, lower.tail = FALSE)
pnorm(0.57,51,4.99, lower.tail = FALSE)
pnorm(57,51,4.99, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
pnorm(57,51,4.99, lower.tail = FALSE)
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(57,51,4.99, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(57,100,0.51, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(0.57,100,0.51, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(57,100,0.51, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(0.57,100,0.51, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(0.57,1,0.51, lower.tail = FALSE)
pnorm(0.57,1,4.99,lower.tail = FALSE)
data(Dinosaurs)
library(Stat2Data)
install.packages(Stat2Data)
install.packages::"Stat2Data"
install.packages("Stat2Data")
library(Stat2Data)
load(Dinosaurs)
load("Dinosaurs")
data("Dinosaurs")
View(Dinosaurs)
data("Dinosaurs")
library(Stat2Data)
data("Dinosaurs")
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
data("Dinosaurs")
pbinom(6,100,0.04, lower.tail = FALSE)
ConspiracySD = sqrt(100*0.04*0.96)
ConspiracySD
pnorm(6,4,1.95, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(0.57,1,0.51, lower.tail = FALSE)
pnorm(0.57,1,4.99,lower.tail = FALSE)
View(Dinosaurs)
summary(Dinosaurs)
summary(Dinosaurs$Source)
summary(Dinosaurs$Depth)
summary(Dinosaurs)
summary(Dinosaurs$Source)
summary(Dinosaurs$Depth)
summary(Source$Depth, data("Dinosaurs"))
MRDinoModel = Source$Depth, data("Dinosaurs")
Dino = data("Dinosaurs")
library(Stat2Data)
data("Dinosaurs")
Dino = data("Dinosaurs")
summary(Dinosaurs)
MRDinoModel = Source$Depth, data=Dinosaurs)
summary(Dino)
Dino = data("Dinosaurs")
summary(Dino)
summary(Dinosaurs)
lm(Iridium~Source$Depth, data=Dinosaurs)
lm(Source~Iridium$Depth, data=Dinosaurs)$Coefficients
data("RiverIron")
data("LeafWidth")
data("LeafWidth")
summary(LeafWidth)
library(Stat2Data)
data("LeafWidth")
summary(LeafWidth)
fm = lm(Width~Year, data = LeafWidth)
summary(fm)
fm = lm(Width~Year, data = LeafWidth)
summary(fm)
fm2 = lm(Width~Year, Area, data = LeafWidth)
summary(fm2)
fm = lm(Width~Year, data = LeafWidth)
summary(fm)
fm2 = lm(Width~Year, Area, data = LeafWidth)
summary(fm2)
summary(fm)
summary(fm2)
fm2 = lm(Width~Year+Area, data = LeafWidth)
summary(fm2)
fm = lm(Width~Year, data = LeafWidth)
summary(fm)
fm2 = lm(Width~Year+Area, data = LeafWidth)
summary(fm2)
plot(fm)
fm = lm(Width~Year, data = LeafWidth)
summary(fm)
plot(fm)
fm2 = lm(Width~Year+Area, data = LeafWidth)
summary(fm2)
plot(fm2)
fm = lm(Width~Year+LWRatio, data = LeafWidth)
summary(fm)
plot(fm)
fm2 = lm(Width~Year+Area, data = LeafWidth)
summary(fm2)
plot(fm2)
View(LeafWidth)
#For LWRatio = 8, YEAR 1883
FMLWD = 28.2648 - (0.0119(1883)) + (-0.0694*8)
#For LWRatio = 8, YEAR 1883
FMLWD = 28.2648 - (0.0119*1883) + (-0.0694*8)
#For LWRatio = 8, YEAR 1883
FMLWD = 28.2648 - (0.0119*1883) + (-0.0694*8)
FMLWD
#For Area = 170, YEAR 1883
FM2LWD = 16.6232 - (0.0081*1883) + (0.0206*)
#For LWRatio = 8, YEAR 1883
FMLWD = 28.2648 - (0.0119*1883) + (-0.0694*8)
FMLWD
#For Area = 170, YEAR 1883
FM2LWD = 16.6232 - (0.0081*1883) + (0.0206*170)
FM2LWD
plot(fm)
plot(fm2)
par(mfrow=c(2,2))
plot(fm)
plot(fm2)
par(mfrow=c(2,2))
plot(fm)
plot(fm2)
par(mfrow=c(4,4))
plot(fm)
plot(fm2)
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
data("LeafWidth")
summary(LeafWidth)
fm = lm(Width~Year+LWRatio, data = LeafWidth)
summary(fm)
fm2 = lm(Width~Year+Area, data = LeafWidth)
summary(fm2)
#For LWRatio = 8, YEAR 1883
FMLWD = 28.2648 - (0.0119*1883) + (-0.0694*8)
FMLWD
#For Area = 170, YEAR 1883
FM2LWD = 16.6232 - (0.0081*1883) + (0.0206*170)
FM2LWD
par(mfrow=c(4,4))
plot(fm)
plot(fm2)
pbinom(6,100,0.04, lower.tail = FALSE)
ConspiracySD = sqrt(100*0.04*0.96)
ConspiracySD
pnorm(6,4,1.95, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(0.57,1,0.51, lower.tail = FALSE)
pnorm(0.57,1,4.99,lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
data("LeafWidth")
summary(LeafWidth)
fm = lm(Width~Year+LWRatio, data = LeafWidth)
summary(fm)
fm2 = lm(Width~Year+Area, data = LeafWidth)
summary(fm2)
#For LWRatio = 8, YEAR 1883
FMLWD = 28.2648 - (0.0119*1883) + (-0.0694*8)
FMLWD
#For Area = 170, YEAR 1883
FM2LWD = 16.6232 - (0.0081*1883) + (0.0206*170)
FM2LWD
par(mfrow=c(2,2))
plot(fm)
plot(fm2)
pbinom(6,100,0.04, lower.tail = FALSE)
ConspiracySD = sqrt(100*0.04*0.96)
ConspiracySD
pnorm(6,4,1.95, lower.tail = FALSE)
JFKConspiracySD = sqrt(100*0.51*0.49)
JFKn = 100
JFKp = 0.51
JFKq = 1-JFKp
JFKnp = JFKn*JFKp
JFKNQ = JFKn*JFKq
pnorm(0.57,1,0.51, lower.tail = FALSE)
pnorm(0.57,1,4.99,lower.tail = FALSE)
3/10
#P(Sinks 3/10)
0.35^3
#P(Sinks 3/10)
PSink3 = 0.35^3
PSink3
PLand7 = 0.65^7
PLand7
PSink3*PLand7
0.65*10
0.65^10
pbinom(5,6,0.65, lower.tail = FALSE)
pbinom(10,12,0.65, lower.tail = FALSE)
dgeom(6,0.65)
dgeom(6,0.35)
dgeom(10,12,0.65, lower.tail = FALSE)
dgeom(10,12,0.65)
dgeom(10,0.35)
Expected = (1/6)*7
Expected
SD = sqrt(Expected)
SD
Expected = (1/6)
Expected
SD = sqrt(Expected)
SD
Expected = (1/6)*7
Expected
SD = sqrt(Expected)
SD
p = 1/6
Expected = 0.166*7
Expected
Expected = 0.166*2
Expected
SD = sqrt(Expected)
SD
Expectedp = p*5
SDp
p = 1/6
Expectedp = p*5
SDp = sqrt(Expectedp)
SDp
ECp = 0.332
ECpno = 1-ECp
100*ECpno
ECp = 0.332
ECpno = 1-ECp
(100*ECpno)/100
pnorm(3.13,lower.tail = TRUE)
pnorm(3.13,lower.tail = FALSE)
pnorm(2.34, lower.tail = FALSE)
pnorm(-0.50, lower.tail = FALSE)
pnorm(-0.50, lower.tail = TRUE)
pnorm(2.34, lower.tail = FALSE)
pnorm(-0.50, lower.tail = FALSE)
pnorm(0.50, lower.tail = FALSE)
pnorm(0.50, lower.tail = FALSE)
2*pnorm(q=2.96, lower.tail = FALSE)
pnorm(0.775)
1-pnorm(0.775)
1-pnorm(1.919)
pnorm (-0.46)
1-pnorm (-0.46)
1-pnorm (-1.8)
1-pnorm (1.8)
pnorm(2.29)
1-pnorm(2.29)
-0.0448-(sqrt(0.1344/408))
-0.0448/(sqrt(0.1344/408))
1-pnorm(2.47)
pnorm(2.47)
pnorm(-2.47)
1-pnorm(-2.47)
pnorm(-4.76)
1-pnorm(-4.76)
pnorm(-4.76)
pnorm(2.9)
1-pnorm(2.9)
1-pnorm(3.58)
setwd("D:/Downloads")
library(readr)
Delta_Airline_Data <- read_csv("Delta Airline Data.csv")
View(Delta_Airline_Data)
summary(Delta_Airline_Data)
sd(Delta_Airline_Data$MinAir)
sd(Delta_Airline_Data$Dist)
sort(table(Delta_Airline_Data),decreasing = TRUE)
sort(table(Delta_Airline_Data$Dest),decreasing = TRUE)
max_difference <- max(Delta_Airline_Data$MinAir)
index_max_diff <- which.max(Delta_Airline_Data$MinAir)
Delta_Airline_Data[index_max_diff,]
max_difference <- max(Delta_Airline_Data$Dist)
index_max_diff <- which.max(Delta_Airline_Data$Dist)
Delta_Airline_Data[index_max_diff,]
max_difference2 <- max(Delta_Airline_Data$Dist)
index_max_diff2 <- which.max(Delta_Airline_Data$Dist)
Delta_Airline_Data[index_max_diff,]
max_difference <- max(Delta_Airline_Data$MinAir)
index_max_diff <- which.max(Delta_Airline_Data$MinAir)
Delta_Airline_Data[index_max_diff,]
max_difference2 <- max(Delta_Airline_Data$Dist)
index_max_diff2 <- which.max(Delta_Airline_Data$Dist)
Delta_Airline_Data[index_max_diff,]
Delta_Airline_Data$difference <- Delta_Airline_Data$Dist - Delta_Airline_Data$MinAir
max_difference <- max(Delta_Airline_Data$difference)
library(readr)
Delta_Airline_Data <- read_csv("Delta Airline Data.csv")
View(Delta_Airline_Data)
summary(Delta_Airline_Data)
sd(Delta_Airline_Data$MinAir)
sd(Delta_Airline_Data$Dist)
sort(table(Delta_Airline_Data$Dest),decreasing = TRUE)
Delta_Airline_Data$difference <- Delta_Airline_Data$Dist - Delta_Airline_Data$MinAir
max_difference <- max(Delta_Airline_Data$difference)
Delta_Airline_Data$difference <- Delta_Airline_Data$Dist - Delta_Airline_Data$MinAir
max_difference <- max(Delta_Airline_Data$difference)
index_max_diff <- which.max(Delta_Airline_Data$difference)
data[index_max_diff,]
index_max_diff <- which.max(Delta_Airline_Data$difference)
data[index_max_diff,]
Delta_Airline_Data[index_max_diff,]
max_diff <- max(Delta_Airline_Data$difference)
index_max_diff <- which.max(Delta_Airline_Data$difference)
Delta_Airline_Data[index_max_diff,]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(janitor)
destdat = read_csv(here("citydat","destination_data20231122.csv"))
# JC: this is useful to create names that are easier to work with #BN - Added this command to my future learning.
destdat <- destdat %>%
clean_names()
hist(destdat$days_to_exit_destination[destdat$veteran == "Yes (HUD)" & destdat$days_to_exit_destination <= 1000],
main = "Majority of Veterans Experience Homelessness\nbetween 121 and 356 days",
sub = "Distribution of Days Homelessness Experienced (up to 1000)",
xlab = "Days to Exit",
col = "maroon",
border = "orange")
hist(destdat$days_to_exit_destination[destdat$veteran == "Yes (HUD)" & destdat$days_to_exit_destination >= 1000],
main = "Five Veterans Experienced more than\n1000 days of Homelessness",
sub = "Distribution of Days Homelessness Experienced (Greater than 1000)",
xlab = "Days to Exit",
col = "maroon",
border = "orange")
veterandestcounts = table(destdat$days_to_exit_destination[destdat$veteran == "Yes (HUD)"])
orderedcounts = veterandestcounts[order(veterandestcounts)]
destmapping <- c(
"No exit interview completed (HUD)" = "No Exit Interview",
"Rental by client, no ongoing housing subsidy (HUD)" = "Rental, No Subsidy",
"Rental by client, with ongoing housing subsidy (HUD)" = "Rental, With Subsidy",
"Staying or living with family, permanent tenure (HUD)" = "Family, Permanent",
"Staying or living with family, temporary tenure (e.g., room, apartment, or house) (HUD)" = "Family, Temporary",
"Substance abuse treatment facility or detox center (HUD)" = "Substance Abuse Facility",
"Staying or living with friends, temporary tenure (e.g., room, apartment, or house) (HUD)" = "Friends, Temporary",
"Jail, prison, or juvenile detention facility (HUD)" = "Jail, Prison, Juvenile Facility",
"Staying or living with friends, permanent tenure (HUD)" = "Friends, Permanent",
"Transitional housing for homeless persons (including homeless youth) (HUD)" = "Transitional House, Including Youth",
"Place not meant for habitation (e.g., a vehicle, an abandoned building, bus/train/subway station/airport or anywhere outside) (HUD)" = "Not Meant for Habitation",
"Residential project or halfway house with no homeless criteria (HUD)" = "Residential Project / Halfway House",
"Emergency shelter, including hotel or motel paid for with emergency shelter voucher, Host Home shelter (HUD)" = "Emergency Shelter",
"Psychiatric hospital or other psychiatric facility (HUD)" = "Psychiatric Facility",
"Deceased (HUD)" = "Deceased",
"Long-term care facility or nursing home (HUD)" = "Nursing Home / Long Term Care",
"Hospital or other residential non-psychiatric medical facility (HUD)" = "Hospital",
"Other (HUD)" = "Other",
"Client prefers not to answer (HUD)" = "Prefered Not to Answer",
"Moved from one HOPWA funded project to HOPWA PH (HUD)" = "HOPWA to HOPWA PH",
"Hotel or motel paid for without emergency shelter voucher (HUD)" = "Hotel without Emergency Voucher",
"Foster care home or foster care group home (HUD)" = "Foster Care / Group Home",
"Owned by client, no ongoing housing subsidy (HUD)" = "Owned Home, no Subsidy",
"Host Home (non-crisis) (HUD)" = "Host Home",
"Owned by client, with ongoing housing subsidy (HUD)" = "Owned Home, with Subsidy"
)
# JC: I'm moving you to consistent naming of lowercase and underscores #BN - Agreed, thank you.
destdat$short_entry_exit_dest = destmapping[destdat$entry_exit_destination]
uniqueshortdestinations = unique(destdat$short_entry_exit_dest)
shortdestcounts = table(destdat$short_entry_exit_dest)
neworderedcounts = shortdestcounts[order(shortdestcounts)]
par(mar = c(5, 9, 5, 9) + 0.1)
barplot(neworderedcounts,
names.arg = names(neworderedcounts),
main = "Veterans Renting without Assistance\nLeading Cause to End Homelessness",
sub = "Veteran Entry Exit Destinations by Greatest to Least",
xlab = "Number of Veterans",
ylab = "",
col = "maroon",
horiz = TRUE,
las = 1,
cex.names = 0.5,
xlim = c(0, 250))
# JC: this line didn't work for me.
# mtext("Entry Exit Destination", side = 2, line = 1, at = 31, las = 1, cex = 0.7) removed, saved for future learning - BN
gentabledat = table(destdat$gender[destdat$veteran == "Yes (HUD)"])
barplot(gentabledat,
col = "maroon",
main = "Veterans by Gender",
xlab = "Gender",
ylab = "Count",
ylim = c(0,200))
setwd("C:/Users/breni/OneDrive/Documents/GitHub/TSWD-Report23/citydat")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(janitor)
destdat = read_csv(here("citydat","destination_data20231122.csv"))
# JC: this is useful to create names that are easier to work with #BN - Added this command to my future learning.
destdat <- destdat %>%
clean_names()
hist(destdat$days_to_exit_destination[destdat$veteran == "Yes (HUD)" & destdat$days_to_exit_destination <= 1000],
main = "Majority of Veterans Experience Homelessness\nbetween 121 and 356 days",
sub = "Distribution of Days Homelessness Experienced (up to 1000)",
xlab = "Days to Exit",
col = "maroon",
border = "orange")
hist(destdat$days_to_exit_destination[destdat$veteran == "Yes (HUD)" & destdat$days_to_exit_destination >= 1000],
main = "Five Veterans Experienced more than\n1000 days of Homelessness",
sub = "Distribution of Days Homelessness Experienced (Greater than 1000)",
xlab = "Days to Exit",
col = "maroon",
border = "orange")
veterandestcounts = table(destdat$days_to_exit_destination[destdat$veteran == "Yes (HUD)"])
orderedcounts = veterandestcounts[order(veterandestcounts)]
destmapping <- c(
"No exit interview completed (HUD)" = "No Exit Interview",
"Rental by client, no ongoing housing subsidy (HUD)" = "Rental, No Subsidy",
"Rental by client, with ongoing housing subsidy (HUD)" = "Rental, With Subsidy",
"Staying or living with family, permanent tenure (HUD)" = "Family, Permanent",
"Staying or living with family, temporary tenure (e.g., room, apartment, or house) (HUD)" = "Family, Temporary",
"Substance abuse treatment facility or detox center (HUD)" = "Substance Abuse Facility",
"Staying or living with friends, temporary tenure (e.g., room, apartment, or house) (HUD)" = "Friends, Temporary",
"Jail, prison, or juvenile detention facility (HUD)" = "Jail, Prison, Juvenile Facility",
"Staying or living with friends, permanent tenure (HUD)" = "Friends, Permanent",
"Transitional housing for homeless persons (including homeless youth) (HUD)" = "Transitional House, Including Youth",
"Place not meant for habitation (e.g., a vehicle, an abandoned building, bus/train/subway station/airport or anywhere outside) (HUD)" = "Not Meant for Habitation",
"Residential project or halfway house with no homeless criteria (HUD)" = "Residential Project / Halfway House",
"Emergency shelter, including hotel or motel paid for with emergency shelter voucher, Host Home shelter (HUD)" = "Emergency Shelter",
"Psychiatric hospital or other psychiatric facility (HUD)" = "Psychiatric Facility",
"Deceased (HUD)" = "Deceased",
"Long-term care facility or nursing home (HUD)" = "Nursing Home / Long Term Care",
"Hospital or other residential non-psychiatric medical facility (HUD)" = "Hospital",
"Other (HUD)" = "Other",
"Client prefers not to answer (HUD)" = "Prefered Not to Answer",
"Moved from one HOPWA funded project to HOPWA PH (HUD)" = "HOPWA to HOPWA PH",
"Hotel or motel paid for without emergency shelter voucher (HUD)" = "Hotel without Emergency Voucher",
"Foster care home or foster care group home (HUD)" = "Foster Care / Group Home",
"Owned by client, no ongoing housing subsidy (HUD)" = "Owned Home, no Subsidy",
"Host Home (non-crisis) (HUD)" = "Host Home",
"Owned by client, with ongoing housing subsidy (HUD)" = "Owned Home, with Subsidy"
)
# JC: I'm moving you to consistent naming of lowercase and underscores #BN - Agreed, thank you.
destdat$short_entry_exit_dest = destmapping[destdat$entry_exit_destination]
uniqueshortdestinations = unique(destdat$short_entry_exit_dest)
shortdestcounts = table(destdat$short_entry_exit_dest)
neworderedcounts = shortdestcounts[order(shortdestcounts)]
par(mar = c(5, 9, 5, 9) + 0.1)
barplot(neworderedcounts,
names.arg = names(neworderedcounts),
main = "Veterans Renting without Assistance\nLeading Cause to End Homelessness",
sub = "Veteran Entry Exit Destinations by Greatest to Least",
xlab = "Number of Veterans",
ylab = "",
col = "maroon",
horiz = TRUE,
las = 1,
cex.names = 0.5,
xlim = c(0, 250))
# JC: this line didn't work for me.
# mtext("Entry Exit Destination", side = 2, line = 1, at = 31, las = 1, cex = 0.7) removed, saved for future learning - BN
gentabledat = table(destdat$gender[destdat$veteran == "Yes (HUD)"])
barplot(gentabledat,
col = "maroon",
main = "Veterans by Gender",
xlab = "Gender",
ylab = "Count",
ylim = c(0,200))
